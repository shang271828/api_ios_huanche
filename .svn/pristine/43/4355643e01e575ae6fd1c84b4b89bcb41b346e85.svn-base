<?php
class Notice_model extends MY_Model
{
	var $user_list_follow ;
	var $str_uid;

	function __construct()
	{
		parent ::__construct();
		$this->load->database();
		$this->define();
	}
	/*********************************************************
	API:publishNormalNotice publishCarNotice publishCommentNotice
	-1-
	************************************************************/


	//======================================================
	//插入普通信息字段
	//======================================================
	function insert_normal_notice($title,$content,$img_list,$notice_type)
	{

		$img_str 	= json_encode($img_list);
		$uid        = 	$this->input->uid;
		$sysTime    = 	$this->input->sysTime;
		$coordinate =   $this->input->coordinate;
		$SQL  		= "INSERT INTO `prefix_notice`
						(`title`, 
						`content`, 
						`img_list`, 
						`notice_type`, 
						`uid`, `time`,  
						`coordinate`, 
						`counter_view`, 
						`counter_follow`, 
						`counter_praise`,
						`counter_worthless`,
						`user_list_view`, 
						`user_list_follow`, 
						`user_list_praise`,						
						`user_list_worthless`
						) 
			   VALUES ('".$title."','".$content."','".$img_str."',
			   			'".$notice_type."','".$uid."','".$sysTime."',
			   			'".$coordinate."', 0, 0, 0, 0,'[]', '[]', '[]','[]')";
		$this->db->query($SQL);
		$nid = $this->db->query("SELECT LAST_INSERT_ID()")->row_array();
	
		return $nid["LAST_INSERT_ID()"];
	}
	//=======================================================
	//在普通信息的基础上，插入额外的二手车信息字段
	//==========================================================
	function insert_car_notice( $nid,$car_notice)
	{
		//$car_notice->market_price = $this->get_market_info($car_notice->brand);
		$car_notice->market_price = $car_notice->price*$car_notice->mileage*0.8;
		$save_money = $car_notice->market_price - $car_notice->price;		
		$car_configuration = json_encode($car_notice->car_configuration);
		$SQL = "INSERT INTO `prefix_car_notice` 
				(`nid`, 
				 `price` , 
				 `car_location` ,
				 `brand` ,				 
				 `market_price`, `save_money` , 
				 `speed_box` , `car_number` , `car_configuration`,				
				`registration_time`,`valid_date` , 
				`insurance_date` , `commerce_insurance_date`, 
				`exchange_time` , `mileage`,`sell_state` ) 
				VALUES ('".$nid."', 
					    '".$car_notice->price."', 
					    '".$car_notice->car_location."',	    
					    '".$car_notice->brand."', 
					    '".$car_notice->market_price."',
					    '".$save_money."', 
					    '".$car_notice->speed_box."',
					    '".$car_notice->car_number."',
					    '".$car_configuration."',
					    '".$car_notice->registration_time."', 
					    '".$car_notice->valid_date."',				 
					    '".$car_notice->insurance_date."',
					    '".$car_notice->commerce_insurance_date."',
					    '".$car_notice->exchange_time."',
					    '".$car_notice->mileage."','1')";
		$this->db->query($SQL);
		//$this->add_interested($nid,$car_notice);

	}

	// function get_market_info($brand)
	// {
	// 	$brand = explode(' ', $brand);
	// 	$version = $brand[2];
	// 	$SQL = "SELECT `market_price`
	// 			FROM `brand_info`
	// 			WHERE `version` ='". $version."'";
	// 	$query = $this->db->query($SQL);
	// 	$result = $query->row_array();
	// 	if(!$result)
	// 		return '';
	// 	$market_price = $result['market_price'];
	// 	if($market_price)
	// 		$tmp = explode('-', $market_price);
	// 	$market_price = ($tmp[0]+$tmp[1])/2;
	// 	$market_price = round ($market_price , 2);
	// 	return $market_price;

	// }
	//===============================================================
	//在普通信息的基础上，插入额外的评论信息字段
	//===================================================================
	function insert_comment_notice( $nid ,
				 					$p_nid,
									$parent_type = "1"
				 					)
	{			
		//$layer =$this->count_layer($p_nid);
		$layer = '1';
		$r_nid =$this->count_root($p_nid,$layer);
		$SQL = "INSERT INTO `prefix_comment` (`nid`, `p_nid`, `r_nid`, `layer`, `parent_type`) 
				VALUES ('".$nid."','".$p_nid."','".$r_nid."','".$layer."','".$parent_type."')";
		$this->db->query($SQL);
	}
	//================================================================
	//更新信息
	//================================================================
	function update_normal_notice($nid,$title,$content,$img_list)
	{
		$img_str = json_encode($img_list);
		$SQL = "UPDATE `prefix_notice` 
				SET `title`     = '".$title."', 
					`content`   = '".$content."',
					`img_list`  = '".$img_str."'
				WHERE `nid` = '".$nid."'";
		$this->db->query($SQL);
		
	}

	function update_car_notice($nid,$car_notice)
	{
		$save_money = $car_notice->market_price - $car_notice->price;
		$car_configuration = json_encode($car_notice->car_configuration);
		$SQL = "UPDATE `prefix_car_notice` 
				SET  `price`    			= '".$car_notice->recency."' ,
				 `market_price` 			= '".$car_notice->market_price."', 
				 `save_money`   			= '".$save_money."', 
				 `car_location`  			= '".$car_notice->car_location."',
				`brand`  					= '".$car_notice->brand."',
				`recency` 					= '".$car_notice->recency."',
				`registration_time`			= '".$car_notice->registration_time."',
				 `speed_box` 				= '".$car_notice->speed_box."',
				`car_number` 				= '".$car_notice->car_number."',
				`valid_date` 				= '".$car_notice->valid_date."',
				`insurance_date` 			= '".$car_notice->insurance_date."',
				`commerce_insurance_date` 	= '".$car_notice->commerce_insurance_date."',
				`exchange_time` 			= '".$car_notice->exchange_time."',
				`mileage`					= '".$car_notice->mileage."',
				`sell_state` 				= '".$car_notice->sell_state."'
				WHERE `nid` = '".$nid."'";
		$this->db->query($SQL);
		
	}

	//=================================================================
	//如果某条信息满足用户的偏好模型，则将此信息加入他的推送列表
	//==================================================================
	function add_interested($nid,$car_notice)
	{
		$query = $this->db->get("prefix_user_preference");
		$preference_array = $query->result_array();
		foreach ($preference_array as $key => $value) 
		{
			$bool = $this->judge_preference($value,$car_notice);
			if($bool)
				$this->add_notice_list_interested($value['uid'],$nid);
		}
	}
	//============================================================
	//判断一条信息是否符合用户偏好
	//=============================================================
	function judge_preference($preference,$car_notice)
	{
		
		if ($preference['brand'])
		{
			$brand   = json_decode($preference['brand']);
			if(!$brand)
				$bool_brand = true;
			else
				$bool_brand  = !(array_search($car_notice->brand,$brand) === NULL);
		}
		else $bool_brand = TRUE;

		if ($preference['speed_box'] )
		{
			$speed_box   = json_decode($preference['speed_box']);
			if(!$speed_box)
				$speed_box = true;
			else
				$bool_speed_box  = !(array_search($car_notice->speed_box,$speed_box) === NULL);
		}
		else $bool_speed_box = TRUE;

		if ($preference['car_type'] )
		{
			$car_type   = json_decode($preference['car_type']);
			if(!$car_type)
				$car_type = true;
			else				
				$bool_car_type  = !(array_search($car_notice->car_type,$car_type) === NULL);
		}
		else $bool_car_type = TRUE;

		if ($preference['age'])
		{
			$age     = explode("-", $preference['age']);
			$bool_age 		=	$car_notice->age 	 > $age[0]&&
							    $car_notice->age 	 < $age[1];
		}
		else $bool_age = TRUE;

		if ($preference['price'] )
		{
			$price   = explode("-", $preference['price']);
			$bool_price 	=	$car_notice->price   > $price[0]&&
							    $car_notice->price 	 < $price[1];
		}
		else $bool_price = TRUE;

		if ($preference['mileage'] )
		{
			$mileage = explode("-", $preference['mileage']);
			$bool_mileage   =	$car_notice->mileage > $mileage[0]&&
							    $car_notice->mileage > $mileage[1];
		}
		else $bool_mileage = TRUE;

		return $bool_brand&&$bool_speed_box&&$bool_car_type&&$bool_age&&$bool_price&&$bool_mileage;
	}
	//=======================================
	//输入信息id，将其加入某一用户的推送列表
	//========================================
	function add_notice_list_interested($uid,$nid)
	{	
		$this->table_name = "prefix_user_relation";
		$this->primary_key = "uid";
		$this->db->select("notice_list_interested");
		$query = $this->db->get("prefix_user_relation");
		$array = $query->row_array();
		$notice_list_interested = $array['notice_list_interested'];

		$interested_array = json_decode($notice_list_interested,true);

		if (array_search($nid, $interested_array) == NULL)
			$interested_array[] = $nid;
		$notice_list_interested = json_encode($interested_array);

		$data = array
		(
				'uid' => $uid,
				'notice_list_interested' => $notice_list_interested
			);
		$this->add($data,"prefix_user_relation",'uid',$uid);
	}
	//===================================================
	//计算评论所在的层数
	//==============================================
	private function count_layer($p_nid)
	{
		if ($p_nid == 0)
			$layer = 1;
		else
		{
			$query = $this->db->get_where($this->table,array("nid"=>$p_nid));
			$notice_array = $query->row_array();
			$notice_type = $notice_array["notice_type"];
			if($notice_type == "comment_notice")
			{
				$query = $this->db->get_where("prefix_comment",array("nid"=>$p_nid));
				$comment_array = $query->row_array();
				$p_layer = $comment_array["layer"];
				$layer = $p_layer + 1;
			}
			else
				$layer = 1;
		}
		return $layer;
	}
	//==================================================
	//计算评论的根元素id
	//============================================
	private function count_root($p_nid,$layer)
	{
		if($layer == 1)
			$r_nid = $p_nid;
		else if($layer > 1)
		{
			for ($i=1; $i<$layer; $i++)
			{
				$this->db->select("p_nid");
				$query = $this->db->get_where("prefix_comment",array("nid"=>$p_nid));
				$r_nid = $query->row_array();
				$r_nid = $r_nid["p_nid"];
				$p_nid = $r_nid;
			}
		}
		return $r_nid;
	}

	//*******************************************************
	//API:getNoticeList & getNoticeDetail   -2-
	//****************************************************
	function get_notice_list($pageNumber,$numberPerPage,$pageType,$get_uid,$uid)
	{

		$this->noticeNumber  = ($pageNumber-1)*$numberPerPage;
		$this->numberPerPage = $numberPerPage;
		$this->pageType = $pageType;
		$SQL = "SELECT " ;
		$normal_sql = "`prefix_notice`.`nid`,`user_location`,`title`,
							`prefix_notice`.`uid`, `prefix_notice`.`time`,`img_list`, 
    						`counter_view`, `counter_follow`, `counter_praise`,`counter_worth`,`counter_worthless`,
    				   		`notice_type`, `username`, `signature`, `avatar_url`";
    				   		    				   		
    	$car_sql =" `price`,`market_price`,`car_location`, `brand`, `registration_time`, 
    				   	  `speed_box`, `car_number`, `mileage`";
		//非timeline、mainpage的情况，uid=input->head->uid
		//timeline，输入get_uid时$uid = $get_uid,不输入时$uid = $input->head->uid
		//mainpage，uid=7
		switch ($this->pageType) 
		{

			case "mainpage":
				$this->select_sql = $SQL.$normal_sql.','.$car_sql;
				$this->get_mainpage();
				break;
			case "discovery":
				$this->select_sql = $SQL.$normal_sql.','.$car_sql;		
				$this->get_discovery($uid);
				break;
			case "timeline":
				$this->select_sql = $SQL.$normal_sql;
				$this->get_timeline($get_uid);
				break;
			case "friendPage":
				$this->select_sql = $SQL.$normal_sql;
				$this->get_friend_page($uid);
				break;
			case "collection":
				$this->select_sql = $SQL.$normal_sql.','.$car_sql;
				$this->get_collection($get_uid);
				break;
			case "interested":
				$this->select_sql = $SQL.$normal_sql.','.$car_sql;
				$this->get_interested($get_uid);
				break;

		}
	

		if(!$this->noticeList) 
    		return $this->noticeList;

    	foreach ($this->noticeList as &$value) 
    	{
    		$value["user_relation"] = $this->set_user_relation($value["uid"]);
    		$this->set_comment($value); 
    		$this->set_evaluate_price($value);
    		$this->set_interact_num($value); 	
    		$value['time_str'] = time_to_str($value['time']);
			  		   			
    	}
    		
		//$this->counter_view();

		return $this->noticeList;
	}

	private function set_user_relation($notice_uid)
	{
		if(property_exists($this->input->head, 'uid'))
		{
			$uid  = $this->input->head->uid;
			$user_relation = $this->judge_relation($notice_uid,$uid);				
		}
		else
    		$user_relation = '0';
    	return $user_relation;
	}

	private function set_evaluate_price(&$value)
	{
		if(   $this->pageType == 'mainpage'
    			||$this->pageType == 'discovery'
    			||$this->pageType == 'collection')
    		{    

    			$value["evaluate_price"] = 
    									   evaluate_price($value['mileage'],
    									   				  $value['market_price']);


    					
    		}
			
	}

	private function set_comment(&$value)
	{
		$comment_list = $this->get_comment_list($value["nid"]);

    	if(!is_array($comment_list)||(!$comment_list))
    	{
    		$value["counter_comment"] = 0;
    	
    		$value["comment_list"]     = $comment_list;
    	}
    		
    	else
    	{
    		$value["counter_comment"] = count($comment_list); 

    		if(   $this->pageType == 'mainpage'
    			||$this->pageType == 'discovery'
    			||$this->pageType == 'collection')
    		{    

    			$value["comment_list"]  =  get_praise_max($comment_list);
    			
    					
    		}
    		else
    		{
    			$value["comment_list"] = array_slice($comment_list,0,10);
    		}						
    	}
	}
	
	private function set_interact_num(&$value)
	{
		$head = $this->input->head;
		if(!property_exists($head, 'uid'))
		{
			$value['is_praised'] = '0';
			$value['is_worth'] = '0';
			$value['is_worthless'] = '0';
			$value['is_followed'] = '0';
		}
		else
		{
			$interact_num = $this->judge_interact($head->uid,$value['nid']);
			$value['is_praised']    = $interact_num['is_praised'];
			$value['is_worth'] 		= $interact_num['is_worth'];
			$value['is_worthless']  = $interact_num['is_worthless'];
			$value['is_followed']   = $interact_num['is_followed'];
		}
			
	}

	private function get_mainpage()
    {
    	$this->get_car_list();
    }
    //推送方法1
	// private function get_discovery($uid)
	// {
	// 	$preference = $this->get_preference($uid);
	// 	$this->get_prefer_car_list($preference);
	// }	
    //推送方法2

    //我关注的人的信息
    private function get_discovery($uid)
	{
		$this->noticeList = $this->get_follow_user_car_list($uid);
	}	
	//我自己的操作记录
    private  function get_timeline($uid)
    {
   
    	$this->noticeList = $this->get_timeline_list($uid);

    }
    //我的好友的信息
    private  function get_friend_page($uid)
    {
    	$normal_notice_list = $this->get_friend_normal_list($uid);
    	
    	//$this->noticeList = $this->get_friend_car_list($uid);
    	$this->noticeList = $normal_notice_list;
                                                                                                           
    }
    //我收藏的信息
    private  function get_collection($uid)
    {
    	
    	$nid_list = $this->get_collection_list($uid);
    	if($nid_list)
			$this->noticeList = $this->get_notice_list_id($nid_list);
		else
			$this->noticeList = [];

    }
    //我感兴趣的信息
    private  function get_interested($uid)
    {    	
    	
    	$nid_list = $this->get_interested_list($uid);
		$this->noticeList = $this->get_notice_list_id($nid_list);

    }
    //跟我相关的动态通知
    function get_inform($pageNumber,$numberPerPage,$uid)
    {
    	$this->noticeNumber  = ($pageNumber-1)*$numberPerPage;
		$this->numberPerPage = $numberPerPage;
    	$this->noticeList = $this->get_inform_list($uid);
    	return $this->noticeList;
    }
    //
    function get_interested_list($uid)
    {
    	$this->db->select('notice_list_interested');
    	$query = $this->db->get('prefix_user_relation');
    	$array = $query->row_array();
    	
    	return json_decode($array['notice_list_interested'],true);
    }

    function get_collection_list($uid)
    {
    	$this->db->select('notice_list_following');

    	$this->db->where('uid',$uid);
    	$query = $this->db->get('prefix_user_relation');
    	$array = $query->row_array();
    	
    	return json_decode($array['notice_list_following'],true);
    }
    //根据输入的nid数组，返回相应的notice列表
    function get_notice_list_nid($nid_array)
    {
    	if(is_array($nid_array))
    	{
    		$nid_str = "('".implode("','",$nid_array)."')";
    		$this->select_sql = "SELECT `prefix_notice`.`nid`,`user_location`,`title`,
								`prefix_notice`.`uid`, `prefix_notice`.`time`,`img_list`, 
    							`counter_view`, `counter_follow`, `counter_praise`,`counter_worthless`,
    					   		`notice_type`, `username`, `signature`, `avatar_url`, `price`, 
    					   		`save_money`,`car_location`, `brand`, `registration_time`, 
    					   		`speed_box`, `car_number`, `mileage`";
    		$SQL = $this->select_sql;
			$SQL .="FROM (`prefix_notice`)
					JOIN `prefix_car_notice` ON `prefix_notice`.`nid` = `prefix_car_notice`.`nid`
					JOIN `prefix_user` ON `prefix_notice`.`uid` = `prefix_user`.`uid`
					WHERE `prefix_car_notice`.`nid` in ".$nid_str."
					ORDER BY `time` desc";
			$query = $this->db->query($SQL);
			$tmp = $query->result_array();
			$this->total_row = count($tmp);
			$query = $this->db->query($SQL);
			$car_list = $query->result_array();
			$noticeList = $this->img_decode($car_list,'img_list');
		}
		else
			$noticeList = '';
		return $noticeList;
    }

    private function get_notice_list_id($nid_array)
    {

    	if(is_array($nid_array))
    	{
    		
    		$nid_str = implode(',', $nid_array);
    		
    		$this->select_sql = "SELECT `prefix_notice`.`nid`,`user_location`,`title`,
								`prefix_notice`.`uid`, `prefix_notice`.`time`,`img_list`, 
    							`counter_view`, `counter_follow`, `counter_praise`,`counter_worthless`,
    					   		`notice_type`, `username`, `signature`, `avatar_url`, `price`, 
    					   		`market_price`,`car_location`, `brand`, `registration_time`, 
    					   		`speed_box`, `car_number`, `mileage`";
    		$SQL = $this->select_sql;
			$SQL .=" FROM (`prefix_notice`)
					JOIN `prefix_car_notice` ON `prefix_notice`.`nid` = `prefix_car_notice`.`nid`
					JOIN `prefix_user` ON `prefix_notice`.`uid` = `prefix_user`.`uid`";
			// $SQL .=" WHERE `prefix_car_notice`.`nid` IN ($nid_str)";
			$SQL .=" WHERE `prefix_car_notice`.`nid` IN ($nid_str)";
			$SQL .=" ORDER BY `time` desc";
			$query = $this->db->query($SQL);
			$tmp = $query->result_array();
			$this->total_row = count($tmp);
		
			$SQL .= " LIMIT ".$this->noticeNumber.",".$this->numberPerPage;
			$query = $this->db->query($SQL);
			$car_list = $query->result_array();
			$noticeList = $this->img_decode($car_list,'img_list');

		}
		else
			$noticeList = '';

		return $noticeList;
    }

  //   private function get_notice_list_id($nid_array)
  //   {
  //   	$nid_str = "('".implode("','",$nid_array)."')";

  //   	$SQL = $this->select_sql;
		// $SQL .="FROM (`prefix_notice`)
		// 		JOIN `prefix_car_notice` ON `prefix_notice`.`nid` = `prefix_car_notice`.`nid`
		// 		JOIN `prefix_user` ON `prefix_notice`.`uid` = `prefix_user`.`uid`
		// 		WHERE `prefix_car_notice`.`nid` in ".$nid_str."
		// 		ORDER BY `time` desc";
		// $query = $this->db->query($SQL);
		// $tmp = $query->result_array();
		// $this->total_row = count($tmp);
	
  //   	$SQL .= " LIMIT ".$this->noticeNumber.",".$this->numberPerPage;
		// $query = $this->db->query($SQL);
		// $car_list = $query->result_array();
		// $this->noticeList = $this->img_decode($car_list,'img_list');

  //   }


    //时间线相关信息
    //取值：my_comment,my_publish,my_prise,my_follow,my_add_friend

    function get_timeline_list($uid)
    {		
    	$SQL = $this->select_sql;

    	$SQL.=  ",`timeline_type`
				FROM (`prefix_user_timeline`)
				JOIN `prefix_notice` ON `prefix_user_timeline`.`nid`=`prefix_notice`.`nid`";

		$SQL.=	"JOIN `prefix_user`   ON `prefix_user_timeline`.`uid`=`prefix_user`.`uid`
				WHERE `prefix_user_timeline`.`uid` =  '".$uid."'";

		$SQL.=  " AND(`timeline_type` = 1
					OR `timeline_type` = 2
					OR `timeline_type` = 3)
				ORDER BY `prefix_user_timeline`.`time` desc";
			
		$query = $this->db->query($SQL);
    	$tmp = $query->result_array();

    	$this->total_row = count($tmp);
		$SQL .= " LIMIT ".$this->noticeNumber.",".$this->numberPerPage;
		$query = $this->db->query($SQL);
    	$timeline_list = $query->result_array();

    	foreach ($timeline_list as &$value) 
    	{
    		$img_list = json_decode($value["img_list"]);
    		$value["img_list"] = $img_list;
    		if($value["timeline_type"] == '2')
    		{
    			$value["price"]        = $this->get_price($value['nid']);
    		    $value["market_price"] = $this->get_market_price($value['nid']);
    			$value["mileage"]      = $this->get_mileage($value['nid']);
    			$value["evaluate_price"] = evaluate_price($value["mileage"],$value["market_price"]);
    		    unset($value["counter_praise"]);
    		}
    		if($value["timeline_type"] == '1')
    		{
    			unset($value["counter_worth"]);
    		    unset($value["counter_worthless"]);
    		}
    			
    	}

    	return $timeline_list;
    }

    private function get_price($nid)
    {
    	$SQL = "SELECT `price`
    			FROM (prefix_car_notice)
    			WHERE `nid`=" . $nid;
    	$query = $this->db->query($SQL);
    	$result = $query->row_array();
    	if($result)
    		return $result['price'];
    	else
    		return 0;
    }

    private function get_market_price($nid)
    {
    	$SQL = "SELECT `market_price`
    			FROM (prefix_car_notice)
    			WHERE `nid`=".$nid;
    	$query = $this->db->query($SQL);
    	$result = $query->row_array();
    	if($result)
    		return $result['market_price'];
    	else
    		return 0;
    }

     private function get_mileage($nid)
    {
    	$SQL = "SELECT `mileage`
    			FROM (prefix_car_notice)
    			WHERE `nid`=".$nid;
    	$query = $this->db->query($SQL);
    	$result = $query->row_array();
    	if($result)
    		return $result['mileage'];
    	else
    		return 0;
    }


    //4 值 5不值 6评论 7回复评论
    function get_inform_list($uid)
    {		
   		$SQL = "SELECT `prefix_notice`.`nid`,`content`,
							`prefix_notice`.`uid`, `prefix_notice`.`time`,`img_list`, 
    						`username`, `avatar_url`";
    	$SQL.=  ",`timeline_type` AS `inform_type`
				FROM (`prefix_user_timeline`)
				JOIN `prefix_notice` ON `prefix_user_timeline`.`nid`=`prefix_notice`.`nid`
				
				JOIN `prefix_user`   ON `prefix_notice`.`uid`=`prefix_user`.`uid`
				WHERE `prefix_user_timeline`.`uid` =  '".$uid."'";

		$SQL.=  "AND (`timeline_type`  = 4
					OR`timeline_type`  = 5				
					OR`timeline_type`  = 6
					OR`timeline_type`  = 7
					)
			ORDER BY `time` desc";
			
		$query = $this->db->query($SQL);
    	$tmp = $query->result_array();
    	$this->total_row = count($tmp);
		$SQL .= " LIMIT ".$this->noticeNumber.",".$this->numberPerPage;
		$query = $this->db->query($SQL);
    	$inform_list = $query->result_array();

    	foreach ($inform_list as &$value) 
    	{
    		$img_list = json_decode($value["img_list"]);

    		$value["img_list"] = $img_list;
    		$value['time_str'] = time_to_str($value['time']);
    	}

    	return $inform_list;
    }

    //主页二手车信息
	private function get_car_list()
	{		
		$SQL = $this->select_sql;
		$SQL .= 
				"FROM (`prefix_notice`)
				JOIN `prefix_car_notice` ON `prefix_notice`.`nid` = `prefix_car_notice`.`nid`
				JOIN `prefix_user` ON `prefix_notice`.`uid` = `prefix_user`.`uid`
				ORDER BY `time` desc, `counter_praise` desc
				LIMIT ".$this->noticeNumber.",".$this->numberPerPage;
		$query = $this->db->query($SQL);
		$car_list = $query->result_array();
		$this->noticeList = $this->img_decode($car_list,'img_list');						
	}

	
	//推送二手车信息
	private function get_prefer_car_list($preference)
	{
		$this->db->select($this->table.".nid,
						   title,"
		 				   .$this->table.".uid,
		 				   img_list,
		 				   counter_view,
		 				   counter_follow,
		 				   counter_praise,
		 				   counter_worthless,
		 				   notice_type,
		 				   username,
      					   signature,
      					   avatar_url,
      					   price,
   						   time,
 						   save_money ,      
	   					   `car_location`  ,  
 						   brand    ,   	
 						   registration_time,
 						   speed_box    , 	
 						   car_number,    	
 						   mileage " );

		$this->db->from($this->table);
		$this->db->order_by("time", "desc"); 
		$this->db->join("prefix_car_notice", $this->table.'.nid = prefix_car_notice.nid');
		$this->db->join("prefix_user", $this->table.'.uid = prefix_user.uid');
		$this->db->where_in("brand",$preference['brand']);
		$this->db->where("price >",  $preference['price'][0] );
		$this->db->where("price <",  $preference['price'][1]);
		$this->db->where("mileage >",$preference['mileage'][0]);
		$this->db->where("mileage <",$preference['mileage'][1] );
		$this->db->limit($this->numberPerPage,$this->noticeNumber);
		$query = $this->db->get(); 
		// $str = $this->db->last_query();
	
		$prefer_car_list = $query->result_array();	
		$this->noticeList = $this->img_decode($prefer_car_list,'img_list');
					
	}
	//用户偏好
	function get_preference($uid)
	{
		$query = $this->db->get_where("prefix_user_preference",array("uid"=>$uid));
		$array = $query->row_array();

		$preference = array
		(
			'brand'   => explode(',', $array['brand']), 
			'price'   => explode('-', $array['price']),
			'mileage' => explode('-', $array['mileage'])	
			);
		return $preference;
	} 
	//好友二手车信息
	private function get_friend_normal_list($uid)
	{
		$null_array = array();

		$this->get_friend_list($uid);

		if (!$this->friend_list_initial)
			return $null_array;

		$friend_list_initial   = json_decode($this->friend_list_initial,true) ;
		$friend_list_secondary = json_decode($this->friend_list_secondary,true) ;
		if (!$friend_list_initial)
			return $null_array;
		$friend_list_initial   = $this->array_to_str($friend_list_initial);	
		$friend_list_secondary = $this->array_to_str($friend_list_secondary);
		$SQL = $this->select_sql;
		$SQL .=	"FROM (`prefix_notice`)
				 JOIN `prefix_user` ON `prefix_notice`.`uid` = `prefix_user`.`uid`	
				 WHERE `notice_type` = 1";
		$SQL .=	" AND (";
		$SQL .=	"`prefix_notice`.`uid` IN ".$friend_list_initial;
		$SQL .=	" OR   `prefix_notice`.`uid` = ".$uid;
		
		if ($friend_list_secondary)
			$SQL .=	" OR `prefix_notice`.`uid` IN ".$friend_list_secondary.")";
		else
			$SQL .=	")";
		$SQL .=	" ORDER BY `time` desc";
		$query = $this->db->query($SQL);
		$tmp = $query->result_array();	
		$this->total_row = count($tmp);	
		$SQL .= " LIMIT ".$this->noticeNumber.",".$this->numberPerPage;

		$query = $this->db->query($SQL);
		$friend_car_list = $query->result_array();

		$friend_car_list = $this->img_decode($friend_car_list,'img_list');

		return $friend_car_list;

							
	}

	private function get_friend_car_list($uid)
	{
		$this->get_friend_list($uid);

		
		$friend_list_initial   = json_decode($this->friend_list_initial,true) ;
		$friend_list_secondary = json_decode($this->friend_list_secondary,true) ;
		$user_list_following   = json_decode($this->user_list_following,true) ;

		$uid_list = array_merge($friend_list_initial,$friend_list_secondary,$user_list_following);
		$uid_str   = $this->array_to_str($uid_list);	

		$SQL  = $this->select_sql;
		$SQL .=	"FROM (`prefix_notice`)
				JOIN `prefix_car_notice` ON `prefix_notice`.`nid` = `prefix_car_notice`.`nid`
				JOIN `prefix_user`       ON `prefix_notice`.`uid` = `prefix_user`.`uid`";
		if($uid_list)
			$SQL .=	" WHERE `prefix_notice`.`uid` IN ".$uid_str;

		$SQL .=	" ORDER BY `time` desc";
		$query = $this->db->query($SQL);
		$tmp = $query->result_array();	
		$this->total_row = count($tmp);	
		$SQL .= " LIMIT ".$this->noticeNumber.",".$this->numberPerPage;

		$query = $this->db->query($SQL);
		$friend_car_list = $query->result_array();

		$friend_car_list = $this->img_decode($friend_car_list,'img_list');

		return $friend_car_list;
			
	}

	private function get_follow_user_car_list($uid)
	{
		$this->get_follow_user_list($uid);

		if ($this->user_list_following)
		{
			$user_list_following = json_decode($this->user_list_following,true) ;
	
			$user_list_following = $this->array_to_str($user_list_following);	

			$SQL = $this->select_sql;
			$SQL .=	"FROM (`prefix_notice`)
					JOIN `prefix_car_notice` ON `prefix_notice`.`nid` = `prefix_car_notice`.`nid`
					JOIN `prefix_user` ON `prefix_notice`.`uid` = `prefix_user`.`uid`";
			if($user_list_following)	
				$SQL .= "WHERE `prefix_notice`.`uid` IN ".$user_list_following;
			$SQL .=" ORDER BY `time` desc";
			$query = $this->db->query($SQL);
			$tmp = $query->result_array();	
			$this->total_row = count($tmp);	

			$SQL .= " LIMIT ".$this->noticeNumber.",".$this->numberPerPage;
	
			$query = $this->db->query($SQL);
			$follow_user_car_list = $query->result_array();
	
			$follow_user_car_list = $this->img_decode($follow_user_car_list,'img_list');
	
			return $follow_user_car_list;
		}
		else
			return $this->user_list_following;				
	}

	function get_friend_list($uid)
	{
		$this->db->select('friend_list_initial,friend_list_secondary,user_list_following');
		$query = $this->db->get_where('prefix_user_relation',array('uid'=>$uid));
		$array = $query->row_array();
		$this->friend_list_initial   = $array['friend_list_initial'];		
		$this->friend_list_secondary = $array['friend_list_secondary'];	
		$this->user_list_following   = $array['user_list_following'];		
	}

	function get_follow_user_list($uid)
	{
		$this->db->select('user_list_following');
		$query = $this->db->get_where('prefix_user_relation',array('uid'=>$uid));
		$array = $query->row_array();

		$this->user_list_following   = $array['user_list_following'];

	}
	
	private function get_comment_list($nid,$is_hot = 0)
	{
		$this->db->select("prefix_user_timeline.nid,
						   content,
		 				   prefix_user_timeline.uid,
		 				   prefix_user_timeline.time,
		 				   counter_praise,
		 				   notice_type,
		 				   username,
      					   avatar_url,
      					   p_nid,
      					   r_nid
		 				   " );
		$this->db->from('prefix_user_timeline');
		if($is_hot)
			$this->db->order_by("counter_praise", "desc"); 
		else
			$this->db->order_by("time", "asc"); 
		
		$this->db->join($this->table, $this->table.'.nid = prefix_user_timeline.nid');
		$this->db->join("prefix_comment", 'prefix_user_timeline.nid = prefix_comment.nid');
		$this->db->join("prefix_user", 'prefix_user_timeline.uid = prefix_user.uid');
		$this->db->where("r_nid",$nid);
		$query = $this->db->get(); 
		$comment_list = $query->result_array();
		foreach ($comment_list as $key => &$value) 
		{
			$value['time_str'] = time_to_str($value['time']);
		}

		return $comment_list;
	}

	// function counter_view()
	// {
	// 	//调用一次，浏览数+1
	// 	foreach ($this->noticeList as  &$value) 
	// 	{
	
	// 		++ $value["counter_view"] ;
	// 		$data = array(
	// 			"counter_view" => $value["counter_view"]) ;
	// 		$this->db->where("nid",$value["nid"]);
	// 		$this->db->update($this->table,$data);
	// 	}
	// }

	//迟一点在做
	// function get_notice_detail($nid)
	// {
	// 	$type = $this->get_notice_type($nid);
		
	// 	$SQL = "SELECT `nid`, `title`, `content`, `img_list`, `uid`, 
	// 					`time`,`coordinate`, `counter_view`, 
	// 					`counter_follow`, `counter_praise`,`counter_worth`,
	// 					`counter_worthless`,`notice_type`";
	// 	switch ($type) 
	// 	{
	// 		case "normal_notice":
	// 			$SQL .= "FROM (`prefix_notice`)";
	// 			break;
	// 		case "car_notice":
	// 			$SQL .= ",`img_list`,`uid`,`username`, `signature`,
	// 						`avatar_url`, 
	// 						`price`, 
	// 						`market_price`,
	// 						`save_money`,
	// 						`mileage`, 
	// 						`brand`,  
	// 						`registration_time`, 
	// 						`car_number`, 
	// 						`speed_box`, 
	// 						`car_location`,
	// 						`valid_date`,
	// 						`insurance_date`,
	// 						`commerce_insurance_date`,
	// 						`exchange_time`,
	// 						`car_configuration`";
	// 			break;
	// 		case "comment_notice":
	// 			$SQL .=
	// 			break;			
	
	// 	}
				
	// 			"WHERE `nid` =  '".$nid."'";

	// 	$query = $this->db->query($SQL);
	// 	$noticeArray = $query->row_array();

		
		
	// 	$noticeArray['relation_notice_list'] = 
	// 										$this->get_relation_notice_list($noticeArray['brand'], 
	// 																		$noticeArray['price']); 

	// 	return $noticeArray;
	// }

	// private function get_notice_type($nid)
	// {
	// 	$SQL = "SELECT `notice_type`
	// 			FROM (`prefix_notice`)
	// 			WHERE `nid` = '" .$nid."'";
	// 	$query = $this->db->query($SQL);
	// 	$result = $query->row_array();
	// 	return $result['notice_type'];
	// }
	function get_notice_detail($nid)
	{
		if (property_exists ( $this->input->head, 'uid'))
			$uid  = $this->input->head->uid;
		else						
			$uid  = '0';//未登录时uid设为0
		
		$SQL = " SELECT `nid`, `title`, `content`, `img_list`, `prefix_notice`.`uid`,`username`,`avatar_url` ,
						`time`,`coordinate`, `counter_view`, 
						`counter_follow`, `counter_praise`,`counter_worth`, `counter_worthless`,
						`user_list_follow`,`user_list_worth`,`user_list_worthless`,
						`notice_type`
				 FROM (`prefix_notice`)";
		$SQL .= " JOIN `prefix_user` ON `prefix_notice`.`uid` = `prefix_user`.`uid`";
		$SQL .= " WHERE `nid` =  '".$nid."'";
		

		$query = $this->db->query($SQL);
		$noticeArray = $query->row_array();
		//判断当前用户是否已经关注此信息
		$this->is_followed($noticeArray,$uid);
		//评论列表
		$noticeArray['comment_list'] 
							= $this->get_comment_list($nid);
		$noticeArray['counter_comment'] 
							= count($noticeArray['comment_list']); 

		$noticeArray['hot_comment_list'] = array_slice($this->get_comment_list($nid,'1'), 0,1) ;

		$type = $noticeArray["notice_type"];
		switch ($type) {
			case "1":
				$noticeArray['img_list'] = json_decode($noticeArray['img_list']);
				break;
			case "2":
				//$noticeArray['img_list'] = json_decode($noticeArray['img_list']);
				$noticeArray = $this->update_car_notice_detail($noticeArray);

				$this->is_worth($noticeArray,$uid);
				$this->is_worthless($noticeArray,$uid);
				
							
				$noticeArray['relation_notice_list'] = 
											$this->get_relation_notice_list($noticeArray['brand'], 
																			$noticeArray['price']); 

				break;
			case "6":
				//$noticeArray['img_list'] = json_decode($noticeArray['img_list']);
				$noticeArray = $this->update_comment_notice_detail($noticeArray);
				break;			
	
		}
		
		$noticeArray['share_num'] = $this->share_num($nid);									
		return $noticeArray;
	}

	function is_followed(&$noticeArray,$uid)
	{
		if(!$noticeArray)
			return '';
		if($noticeArray['user_list_follow'] != '[]')
			$user_list_follow = json_decode($noticeArray['user_list_follow'],true);
		else
			$user_list_follow = '';
		unset($noticeArray['user_list_follow']);

		if($uid == 0)
		{
			$noticeArray["is_followed"] = '0';
		}
		elseif(!is_array($user_list_follow))
		{
			$noticeArray["is_followed"] = '0';
		}
		else
		{
			if(in_array($uid , $user_list_follow))
				$noticeArray["is_followed"] = '1';
			else
				$noticeArray["is_followed"] = '0';
		}
	}

	function is_worth(&$noticeArray,$uid)
	{
		if(!$noticeArray)
			return '';
		if($noticeArray['user_list_worth'] != '[]')
			$user_list_worth = json_decode($noticeArray['user_list_worth'],true);
		else
			$user_list_worth = '';
		unset($noticeArray['user_list_worth']);

		if($uid == 0)
		{
			$noticeArray["is_worth"] = '0';
		}
		elseif(!is_array($user_list_worth))
		{
			$noticeArray["is_worth"] = '0';
		}
		else
		{
			if(in_array($uid , $user_list_worth))
				$noticeArray["is_worth"] = '1';
			else
				$noticeArray["is_worth"] = '0';
		}
	}

	function is_worthless(&$noticeArray,$uid)
	{
		if(!$noticeArray)
			return '';
		if($noticeArray['user_list_worthless'] != '[]')
			$user_list_worthless = json_decode($noticeArray['user_list_worthless'],true);
		else
			$user_list_worthless = '';
		unset($noticeArray['user_list_worthless']);

		if($uid == 0)
		{
			$noticeArray["is_worthless"] = '0';
		}
		elseif(!is_array($user_list_worthless))
		{
			$noticeArray["is_worthless"] = '0';
		}
		else
		{
			if(in_array($uid , $user_list_worthless))
				$noticeArray["is_worthless"] = '1';
			else
				$noticeArray["is_worthless"] = '0';
		}
	}
	//分享数目
	private function share_num($nid)
	{
		$SQL = "SELECT `sid`
				FROM (`prefix_share`)
				WHERE `nid` =".$nid;
		$query = $this->db->query($SQL);
		$result = $query->result_array();
		if(is_array($result))
			$share_num = count($result);
		else
			$share_num = 0;
		return $share_num;
	}
	private function get_relation_notice_list($brand, $price)
	{
		$price1 = $price - 15;
		$price2 = $price + 15;

		$SQL = "SELECT `prefix_notice`.`nid`, `title`, `time`,`user_location`,
					`prefix_notice`.`uid`, `img_list`, `counter_view`, 
					`counter_follow`, `counter_praise`, `counter_worthless`,
					`notice_type`, `username`, `signature`, `avatar_url`, 
					`price`, `save_money`,`car_location`, `brand`, 
					`registration_time`, `speed_box`, `car_number`, `mileage`
				FROM (`prefix_notice`)
				JOIN `prefix_car_notice` ON `prefix_notice`.`nid` = `prefix_car_notice`.`nid`
				JOIN `prefix_user` ON `prefix_notice`.`uid` = `prefix_user`.`uid`
				WHERE `prefix_car_notice`.`brand` = '".$brand."'
				AND `prefix_car_notice`.`price` <= ".$price2."
				AND `prefix_car_notice`.`price` >=".$price1."
				ORDER BY `time` desc";

		$query = $this->db->query($SQL);
		$car_list = $query->result_array();
		$relation_notice_list = $this->img_decode($car_list,'img_list');

		return $relation_notice_list;
	}

	private function update_comment_notice_detail($noticeArray)
	{
		$nid      = $noticeArray["nid"];
		$uid      = $noticeArray["uid"];
		$img_list = json_decode($noticeArray["img_list"]);

		$user_info = $this->get_user_info($uid);
		$comment_info  = $this->get_comment_info ($nid);
	 	$noticeArray["img_list"]   = $img_list;
		$noticeArray["uid"]        = $user_info["uid"];
		$noticeArray["username"]   = $user_info["username"];
		$noticeArray["signature"]  = $user_info["signature"];
		$noticeArray["avatar_url"] = $user_info["avatar_url"];
		$noticeArray["p_nid"]      = $comment_info["p_nid"];
		$noticeArray["layer"]      = $comment_info["layer"];
		//$noticeArray["commentType"]      = $comment_info["commentType"];

		return $noticeArray;			
	}
	function update_car_notice_detail($noticeArray)
	{
		$nid = $noticeArray["nid"];

		$uid = $noticeArray["uid"];
		
		$img_list = json_decode($noticeArray["img_list"]);

		//$user_info = $this->get_user_info($uid);
		$car_info  = $this->get_car_info ($nid);
		if (!$car_info["car_configuration"])
			$car_info["car_configuration"] = '["abs","esp","remote_key"]';
		$car_configuration = 
		json_decode($car_info["car_configuration"]);

		$noticeArray["img_list"]   = $img_list;
		// $noticeArray["uid"]        = $user_info["uid"];
		// $noticeArray["username"]   = $user_info["username"];
		// $noticeArray["signature"]  = $user_info["signature"];
		// $noticeArray["avatar_url"] = $user_info["avatar_url"];
		$noticeArray["price"]      = $car_info["price"];
		$noticeArray["market_price"]    = $car_info["market_price"];
		$noticeArray["save_money"]    = $car_info["save_money"];
		$noticeArray["mileage"]    = $car_info["mileage"];
		$noticeArray["brand"]      = $car_info["brand"];		
		$noticeArray["registration_time"]    = $car_info["registration_time"];
		$noticeArray["car_number"]    = $car_info["car_number"];
		$noticeArray["speed_box"]    = $car_info["speed_box"];
		if($car_info["car_location"])
		{
			$tmp = explode(' ', $car_info["car_location"]);
			if(count($tmp)>1)
				$noticeArray['car_location'] = $tmp[1];
		}			
		
		$noticeArray["car_location"]    = $car_info["car_location"];		
		$noticeArray["valid_date"]    = $car_info["valid_date"];
		$noticeArray["insurance_date"]    = $car_info["insurance_date"];
		$noticeArray["commerce_insurance_date"]    = $car_info["commerce_insurance_date"];
		$noticeArray["exchange_time"]    = $car_info["exchange_time"];
		$noticeArray["car_configuration"]    = $car_configuration;
		return $noticeArray;			
	}

	private function get_img_info($nid)
	{
		$query = $this->db->get_where("prefix_picture",
									  array('nid' => $nid));
		$img_info = $query->row_array();

	return $img_info;
	}

	private function get_comment_info($nid)
	{
		$query = $this->db->get_where("prefix_comment",
									  array('nid' => $nid));
		$img_info = $query->row_array();

	return $img_info;
	}

	private function get_user_info($uid)
	{

		$SQL = "SELECT *
				FROM (`prefix_user`)
				WHERE `uid` =  '".$uid."'";
		$query = $this->db->query("$SQL");
		$user_info = $query->row_array();

	return $user_info;
	}

	private function get_car_info($nid)
	{		
		$SQL = "SELECT *
				FROM (`prefix_car_notice`)
				WHERE `nid` =  '".$nid."'";
		$query = $this->db->query("$SQL");
		$car_info = $query->row_array();
	return $car_info;
	}

    //*******************************************************
	//API:searchNotice
	//****************************************************
	 //*******************************************************
	//API:searchNotice
	//****************************************************

	function search_notice_list($pageNumber,
								$numberPerPage,
								$location,
								$searchStr ,
								$filterValue,
								$sortValue,
								$i)
	{
		$this->noticeNumber  = ($pageNumber-1)*$numberPerPage;
		$this->numberPerPage = $numberPerPage;
		$this->location      = $location;
		$this->SQL = '';
		$this->search_sql($searchStr);
		if (!($filterValue == '0') )
			$this->filter_sql($filterValue);
		if($i == 'desc')
			$this->sort_sql_desc($sortValue);
		else
			$this->sort_sql_asc($sortValue);
		$this->SQL .= " LIMIT ".$this->noticeNumber.",".$this->numberPerPage;
		$query = $this->db->query($this->SQL);
		$this->noticeList = $query->result_array();
		$this->noticeList = $this->img_decode($this->noticeList,'img_list');
		$this->noticeList = $this->img_decode($this->noticeList,'car_configuration');
		if($this->noticeList) 
    	{

    		foreach ($this->noticeList as &$value) 
    		{

    			$comment_list = $this->get_comment_list($value["nid"]);
    			$value["counter_comment"] = count($comment_list);
    			if(is_array($comment_list))
    			{

    				//一条热门评论
    				$comment_list_1 = array_slice($comment_list,0,1);
    				$value["comment_list"] = $comment_list_1;
    				if(property_exists($this->input->head, 'uid'))
					{
						$uid  = $this->input->head->uid;
						$value["user_relation"] = $this->judge_relation($value["uid"],$uid);				
					}
					else
    					$value["user_relation"] = '0';

    			}
    			else
    				$value["comment_list"] = '';
    			   			
    		}
    	}	
		
		return $this->noticeList;
	}

	private function search_sql($searchStr)

	{
		// $this->SQL .= "SELECT `prefix_car_notice`.`nid`, `title`, `time`,`user_location`,`prefix_notice`.`uid`, 
		// 					  `img_list`, `counter_view`, `counter_follow`, `counter_worth`, `counter_worthless`,
		// 					  `notice_type`, `username`, `signature`, `avatar_url`, `price`, 
		// 					  `save_money`, `car_location`, `brand`,`age`, `registration_time`, 
		// 					  `speed_box`, `car_number`, `mileage`, `car_configuration`
		// 				FROM (`prefix_car_notice`)";
		 $this->SQL .= "SELECT `prefix_notice`.`nid`,`user_location`,`title`,
							`prefix_notice`.`uid`, `prefix_notice`.`time`,`img_list`, 
    						`counter_view`, `counter_follow`, `counter_praise`,`counter_worth`,`counter_worthless`,
    				   		`notice_type`, `username`, `signature`, `avatar_url`, `price`, 
    				   		`save_money`,`car_location`, `brand`, `registration_time`, 
    				   		`speed_box`, `car_number`, `mileage`, `car_configuration`
		 				FROM (`prefix_car_notice`)";

		$this->SQL .=  "JOIN `prefix_notice` ON `prefix_notice`.`nid` = `prefix_car_notice`.`nid`
						JOIN `prefix_user` ON `prefix_notice`.`uid` = `prefix_user`.`uid`";
		$this->SQL .= "WHERE (`title` LIKE '%".$searchStr."%'";
		$this->SQL .= "OR `brand`    LIKE '%".$searchStr."%'";
		$this->SQL .= "OR `content`  LIKE '%".$searchStr."%'";
		$this->SQL .= "OR `car_location` LIKE '%".$searchStr."%')";
		$this->SQL .= "AND `car_location`LIKE '%".$this->location."%' ";
	}

	private function filter_sql($filterValue)
	{

		if (property_exists ( $filterValue, 'price'))
		{
			$price = explode("-", $filterValue->price);
			$this->SQL .= "AND `price`<=".$price[1]." ";
			$this->SQL .= "AND `price`>=".$price[0]." ";
		}

		if (property_exists ( $filterValue, 'age'))
		{
			$age = explode("-", $filterValue->age);
			$this->SQL .= "AND `age`   <=  ".$age[1]." ";
			$this->SQL .= "AND `age`   >=  ".$age[0]." ";
		}

		if (property_exists ( $filterValue, 'mileage'))
		{
			$mileage = explode("-", $filterValue->mileage);
			$this->SQL .= "AND `mileage`   <=  ".$mileage[1]." ";
			$this->SQL .= "AND `mileage`   >=  ".$mileage[0]." ";
		}

		if (property_exists ( $filterValue, 'brand'))
		{
			$this->SQL .= "AND `brand`  =  '".$filterValue->brand."' ";
		}

		if (property_exists ( $filterValue, 'speedBox'))
		{
			$this->SQL .= "AND `speed_box`  =  '".$filterValue->speedBox."' ";
		}

		if (property_exists ( $filterValue, 'carType'))
		{
			$this->SQL .= "AND `car_type`  =  '".$filterValue->carType."' ";
		}
	}


	private function sort_sql_desc($sortValue)
	{

		switch ($sortValue) 
		{
			case '0':
				$this->SQL .= "ORDER BY `time` desc";
				break;
			case 'price':
				$this->SQL .= "ORDER BY `price` desc";
				break;
			case 'age':
				$this->SQL .= "ORDER BY `age` desc";
				break;
			case 'mileage':
				$this->SQL .= "ORDER BY `mileage` desc";
				break;

		}
		
	}

	private function sort_sql_asc($sortValue)
	{

		switch ($sortValue) 
		{
			case '0':
				$this->SQL .= "ORDER BY `time` asc";
				break;
			case 'price':
				$this->SQL .= "ORDER BY `price` asc";
				break;
			case 'age':
				$this->SQL .= "ORDER BY `age` asc";
				break;
			case 'mileage':
				$this->SQL .= "ORDER BY `mileage` asc";
				break;

		}
		
	}

	//new function about interact

	function update_interact_list($var_name,$var_name_2,$nid)
	{		
		//获得user_list
		$this->get_interact_list($var_name,$nid);
		//判断交互动作
		$is_done = $this->judge_done_type();
		//生成入库数据
		$user_list = json_encode($user_list);

		$data = array(
					  "user_list_".$var_name => $user_list,
					  "counter_".$var_name   => $counter
					  );

		$this->db->update($this->table,
						  $this->data,
						  array('nid' =>$nid));
		return $is_done;	
	}

	private function get_interact_list($var_name,$nid)
	{
		
		$SQL = "SELECT `user_list_".$var_name."` AS user_list, 
					   `counter_".$var_name."` AS counter
				FROM (`prefix_notice`)
				WHERE `nid` =  ".$nid;
		$query = $this->db->query($SQL);
		$tmp = $query->row_array();

		if(!$tmp)
		{
			$this->user_list = '[]';
			$this->counter   = 0;
		}	
		else
		{
			$this->user_list = $tmp['user_list'];
			$this->counter   = $tmp['counter'];
		}
		
		if(!$user_list)
			$this->user_list = '[]';

		$this->user_list = json_decode($this->user_list,true);
	}

	private function judge_done_type()
	{
		$uid = $this->input->head->uid;
		$key = array_search($uid, $user_list);	

		if($key === FALSE)
		{
			$this->user_list[] = $uid;
			++$this->counter;
			$is_done = '1';
		}
		else
		{
			array_splice($this->user_list,$key,1);
			--$this->counter;
			$is_done = '0';
		}
		return $is_done;
	}

	// function update_interact_list($var_name_1,$var_name_2,$nid)
	// {		
	// 	//获得user_list
	// 	$this->get_interact_list($var_name_1,$var_name_2,$nid);
	// 	//判断交互动作
	// 	$is_done = $this->judge_done_type();
	// 	//生成入库数据
	// 	$user_list = json_encode($user_list);

	// 	$data = array(
	// 				  "user_list_".$var_name => $user_list,
	// 				  "counter_".$var_name   => $counter
	// 				  );
	// 	var_dump($data);
	// 	$this->db->update($this->table,
	// 					  $this->data,
	// 					  array('nid' =>$nid));
	// 	return $is_done;	
	// }

	// private function get_interact_list($var_name_1,$var_name_2,$nid)
	// {
		
	// 	$SQL = "SELECT `user_list_".$var_name_1."` AS user_list_1,
	// 				   `user_list_".$var_name_2."` AS user_list_2,  
	// 				   `counter_".$var_name_1."` AS counter_1,
	// 				   `counter_".$var_name_2."` AS counter_2
	// 			FROM (`prefix_notice`)
	// 			WHERE `nid` =  ".$nid;

	// 	$query = $this->db->query($SQL);
	// 	$tmp = $query->row_array();


	// 	$this->user_list_1 = $tmp['user_list_1'];
	// 	$this->counter_1   = $tmp['counter_1'];
	// 	$this->user_list_2 = $tmp['user_list_2'];
	// 	$this->counter_2   = $tmp['counter_2'];
		
	// 	if(!$user_list_1)
	// 		$this->user_list_1 = '[]';
	// 	if(!$user_list_2)
	// 		$this->user_list_2 = '[]';
	// 	$this->user_list_1 = json_decode($this->user_list_1,true);
	// 	$this->user_list_2 = json_decode($this->user_list_2,true);
	// }

	// private function judge_done_type()
	// {
	// 	$uid = $this->input->head->uid;
	// 	$key_1 = array_search($uid, $user_list_1);	
	// 	$key_2 = array_search($uid, $user_list_2);

	// 	if($key_2 === FALSE && $key_1 === FALSE)
	// 	{
	// 		$user_list_1[] = $uid;
	// 		++$counter_1;
	// 		$is_done = '1';
			
	// 	}
	// 	elseif($key_1 === FALSE)
	// 	{
	// 		$user_list_1[] = $uid;
	// 		array_splice($user_list_2,$key_2,1);
	// 		++$counter_1;
	// 		--$counter_2;
	// 		$is_done = '2';
	// 	}
	// 	else
	// 	{
	// 		array_splice($user_list_1,$key_1,1);
	// 		--$counter_1;
	// 		$is_done = '0';			
	// 	}


	// 	// if($key === FALSE)
	// 	// {
	// 	// 	$this->user_list[] = $uid;
	// 	// 	++$this->counter;
	// 	// 	$is_done = '1';
	// 	// }
	// 	// else
	// 	// {
	// 	// 	array_splice($this->user_list,$key,1);
	// 	// 	--$this->counter;
	// 	// 	$is_done = '0';
	// 	// }
	// 	return $is_done;
	// }


//==========================================================
	private function judge_interact($host_uid,$nid)
	{
		$this->db->select('user_list_follow,
						   user_list_praise,
						   user_list_worth,
						   user_list_worthless');
		$this->db->where('nid',$nid);
		$query = $this->db->get('prefix_notice');
		$tmp = $query->row_array();

		$user_list_follow   	= json_decode($tmp['user_list_follow'],true);
		$user_list_praise		= json_decode($tmp['user_list_praise'],true);
		$user_list_worth		= json_decode($tmp['user_list_worth'],true);
		$user_list_worthless	= json_decode($tmp['user_list_worthless'],true);
		$interact_num['is_followed'] = '0';
		$interact_num['is_praised'] = '0'; 
		$interact_num['is_worth'] = '0';
		$interact_num['is_worthless'] = '0';
		if($user_list_follow)
			if(in_array($host_uid, $user_list_follow))
				$interact_num['is_followed'] = '1';
		if($user_list_praise)
			if(in_array($host_uid, $user_list_praise))
				$interact_num['is_praised'] = '1';
		if($user_list_worth)
			if(in_array($host_uid, $user_list_worth))
				$interact_num['is_worth'] = '1';
		if($user_list_worthless)
			if(in_array($host_uid, $user_list_worthless))
				$interact_num['is_worthless'] = '1';
		return $interact_num;
	} 

	//*******************************************************
	//API:praiseNotice & followNotice
	//****************************************************
	//更新user_list_praise和counter_praise
	//use :json_encode
	function update_praise_list($nid)
	{
		$uid = $this->input->head->uid;
		$SQL = "SELECT `user_list_praise`, `counter_praise`
				FROM (`prefix_notice`)
				WHERE `nid` =  ".$nid;
		$query = $this->db->query($SQL);
		$noticeInfo = $query->row_array();

		$user_list_praise = $noticeInfo['user_list_praise'];
		$counter_praise   = $noticeInfo['counter_praise'];
		if($user_list_praise == NULL || $user_list_praise == 'null' )
			$user_list_praise = '[]';
		$user_list_praise = json_decode($user_list_praise,true);

		$key = array_search($uid, $user_list_praise);
		if($key === FALSE)
		{
			$user_list_praise[] = $uid;
			++$counter_praise;
			$is_praised = '1';
		}
		else
		{
			array_splice($user_list_praise,$key,1);
			--$counter_praise;
			$is_praised = '0';
		}
		$user_list_praise = json_encode($user_list_praise);

		$data = array(
			"user_list_praise" => $user_list_praise,
			"counter_praise"   => $counter_praise
			);
		$this->db->update($this->table,$data,array('nid' =>$nid));
		return $is_praised;
	}
	//更新user_list_worth和counter_worth
	//use :json_encode
	function update_worth_list($nid)
	{
		$uid = $this->input->head->uid;
		$SQL = "SELECT `user_list_worthless`,`user_list_worth`, 
						`counter_worthless`,`counter_worth`
				FROM (`prefix_notice`)
				WHERE `nid` =  ".$nid;
		$query = $this->db->query($SQL);
		$noticeInfo = $query->row_array();
		$user_list_worthless = $noticeInfo['user_list_worthless'];
		$user_list_worth = $noticeInfo['user_list_worth'];
		$counter_worthless   = $noticeInfo['counter_worthless'];
		$counter_worth       = $noticeInfo['counter_worth'];
		if($user_list_worth == NULL 
		                            ||$user_list_worth == 'null' )
			$user_list_worth = '[]';
		if($user_list_worthless == NULL 
		                            ||$user_list_worthless == 'null' )
			$user_list_worthless = '[]';
		$user_list_worthless = json_decode($user_list_worthless,true);
		$user_list_worth     = json_decode($user_list_worth,true);

		$key_worthless = array_search($uid, $user_list_worthless);
		$key_worth     = array_search($uid, $user_list_worth);
		if($key_worthless === FALSE && $key_worth === FALSE)
		{
			$user_list_worth[] = $uid;
			++$counter_worth;
			$is_worthless = '1';
			
		}
		elseif($key_worth === FALSE)
		{
			$user_list_worth[] = $uid;
			array_splice($user_list_worthless,$key_worthless,1);
			++$counter_worth;
			--$counter_worthless;
			$is_worthless = '2';
		}
		else
		{
			array_splice($user_list_worth,$key_worth,1);
			--$counter_worth;
			$is_worthless = '0';			
		}

		$user_list_worthless = json_encode($user_list_worthless);
		$user_list_worth     = json_encode($user_list_worth);
		$data = array(
			"user_list_worth" 	  => $user_list_worth,
			"counter_worth"   	  => $counter_worth,			
			"user_list_worthless" => $user_list_worthless,
			"counter_worthless"   => $counter_worthless
			);
		$this->db->update($this->table,$data,array('nid' =>$nid));
		return $is_worthless;
	}
	//更新user_list_worthless和counter_worthless
	//use :json_encode
	function update_worthless_list($nid)
	{
		$uid = $this->input->head->uid;
		$SQL = "SELECT `user_list_worthless`,`user_list_worth`, 
						`counter_worthless`,`counter_worth`
				FROM (`prefix_notice`)
				WHERE `nid` =  ".$nid;
		$query = $this->db->query($SQL);
		$noticeInfo = $query->row_array();
		$user_list_worthless = $noticeInfo['user_list_worthless'];
		$user_list_worth = $noticeInfo['user_list_worth'];
		$counter_worthless   = $noticeInfo['counter_worthless'];
		$counter_worth       = $noticeInfo['counter_worth'];
		if($user_list_worthless == NULL 
		                            ||$user_list_worthless == 'null' )
			$user_list_worthless = '[]';
		if($user_list_worth == NULL 
		                            ||$user_list_worth == 'null' )
			$user_list_worth = '[]';
		$user_list_worthless = json_decode($user_list_worthless,true);
		$user_list_worth     = json_decode($user_list_worth,true);

		$key_worthless = array_search($uid, $user_list_worthless);
		$key_worth     = array_search($uid, $user_list_worth);
		if($key_worthless === FALSE && $key_worth === FALSE)
		{
			$user_list_worthless[] = $uid;
			++$counter_worthless;
			$is_worthless = '1';
			
		}
		elseif($key_worthless === FALSE)
		{
			$user_list_worthless[] = $uid;
			array_splice($user_list_worth,$key_worth,1);
			++$counter_worthless;
			--$counter_worth;
			$is_worthless = '2';
		}
		else
		{
			array_splice($user_list_worthless,$key_worthless,1);
			--$counter_worthless;
			$is_worthless = '0';			
		}

		$user_list_worthless = json_encode($user_list_worthless);
		$user_list_worth = json_encode($user_list_worth);
		$data = array(
			"user_list_worth" 	  => $user_list_worth,
			"counter_worth"   	  => $counter_worth,			
			"user_list_worthless" => $user_list_worthless,
			"counter_worthless"   => $counter_worthless
			);
		$this->db->update($this->table,$data,array('nid' =>$nid));
		return $is_worthless;
	}
	//更新user_list_follow和counter_follow
	//use :json_encode
	function update_follow_list($uid,$nid)
	{
		$SQL = "SELECT `user_list_follow`, `counter_follow`
				FROM (`prefix_notice`)
				WHERE `nid` =  ".$nid;
		$query = $this->db->query($SQL);
		$noticeInfo = $query->row_array();
		$user_list_follow = $noticeInfo['user_list_follow'];
		$counter_follow   = $noticeInfo['counter_follow'];

		if($user_list_follow == NULL ||$user_list_follow == 'null' )
			$user_list_follow = '[]';
		$user_list_follow = json_decode($user_list_follow,true);

		$key = array_search($uid, $user_list_follow);
		if($key === FALSE)
		{
			$user_list_follow[] = $uid;
			++$counter_follow;
			$is_followed = '1';
		}
		else
		{
			array_splice($user_list_follow,$key,1);
			--$counter_follow;
			$is_followed = '0';
		}
		$user_list_follow = json_encode($user_list_follow);

		$data = array(
			"user_list_follow" => $user_list_follow,
			"counter_follow"   => $counter_follow
			);
		$this->db->update($this->table,$data,array('nid' =>$nid));
		return $is_followed;
	}
	
	//===========================================
	function get_publish_notice_num($uid)
	{

		$SQL = "SELECT `uid`
				FROM prefix_notice
				WHERE `uid` = ".$uid."
				AND `notice_type` = '2'";
		$query = $this->db->query($SQL);		
		$noticeList = $query->result_array();

		return count($noticeList);
	}


	function get_total_row($uid,$pageType)
    {
  

    	switch ($pageType) 
		{
			case "mainpage":
				$this->db->select('count(nid) as total_row');
 			   
		        $query = $this->db->get("prefix_car_notice");
				
		        $this->total_row = $query->row()->total_row;		
				
				break;
			case "discovery":
				$this->get_discovery($uid);
				break;
			case "timeline":
				$this->get_timeline($uid);
				break;
			case "friendPage":
				$this->get_friend_page($uid);
				break;
			case "collection":
				$this->get_collection($uid);
				break;
			case "search":
				$this->search_notice_list($uid);
				break;
			case "inform":
				$this->get_inform_list($uid);
				break;

	
		}
       	if (!property_exists ( $this, 'total_row'))
				
			$this->total_row  = '0';
        return $this->total_row;
        
    }

    // function get_total_row_3($uid,$pageType)

    function get_total_row_search($pageType,
								  $pageNumber,
								  $numberPerPage,
								  $location,
								  $searchType,
								  $searchStr)

    {

    	switch ($pageType) 
		{
			
			case "search":
				$this->search_notice_list(
										$pageNumber,
										$numberPerPage,
										$location,
										$searchType,
										$searchStr);
			break;

			default:
				echo "error";
				break;
		}
       
        return $this->total_row;
        
    }

    function array_to_str($array)
    {
    	if (!$array)
    		return $array;

    	$str = '("'.$array[0].'"';
    	foreach ($array as $key=>$value) 
    	{
    		if($key > 0)
    			$str .= ',"'.$value.'"';
    	}
    	$str .=')';

		return $str;
    }

	private function img_decode($array,$var_name)
	{

		foreach ($array as &$value) 
    	{
    		switch ($var_name)
			{
				case 'img_list':
					if ($value["img_list"] == '[""]')
    				{
    					$img_list = array("http://xdream.co/CI_API/upload_dir/225e97394f00e2bf3c42f34e665553c3.jpg");
    				}
    				else
    				{    		
    					$img_list = json_decode($value["img_list"]);  					
    				}
    				$value["img_list"] = $img_list;
    			break;

    			case 'car_configuration':
    				if ($value["car_configuration"] == '')
    				{
    					$car_configuration = array("abs","auto_conditioner","esp");
    				}
    				else
    				{    		
    					$car_configuration = json_decode($value["car_configuration"]);  					
    				}
    				$value["car_configuration"] = $car_configuration;
    			break;
					
			}
    		
    	}
    	return $array;
	}
	//判断信息发布者与好友关系，输入参数为信息发布者host_uid
	//如果uid存在一度好友，

	private function judge_relation($host_uid,$uid)
	{

		$this->db->select('friend_list_initial,
						   friend_list_secondary,
						   user_list_following');

		$this->db->where('uid',$uid);
		$query = $this->db->get('prefix_user_relation');
		$tmp = $query->row_array();

		// $friend_list_initial   = json_decode(
		// 								key_check($tmp,'friend_list_initial')
		// 								,TRUE);
		// $friend_list_secondary = json_decode(
		// 								key_check($tmp,'friend_list_secondary')
		// 								,TRUE);
		// $user_list_following   = json_decode(
		// 								key_check($tmp,'user_list_following')
		// 								,TRUE);

		if(isset($tmp['friend_list_initial']))
			$friend_list_initial   	= json_decode($tmp['friend_list_initial'],true);
		else
			$friend_list_initial = 0;
		if(isset($tmp['friend_list_secondary']))
			$friend_list_secondary   	= json_decode($tmp['friend_list_secondary'],true);
		else
			$friend_list_secondary = 0;
		if(isset($tmp['user_list_following']))
			$user_list_following   	= json_decode($tmp['user_list_following'],true);
		else
			$user_list_following = 0;
		
			

		if($friend_list_initial)
			if(in_array($host_uid, $friend_list_initial))
				return '1';
		if($friend_list_secondary)
			if (in_array($host_uid, $friend_list_secondary)) 
				return '2';
		if($user_list_following)
			if (in_array($host_uid, $user_list_following)) 
				return '3';			

		return '0';
	}

	



	function is_exist($var_name,$var_value)
	{ 
		; $sql = "SELECT EXISTS (
							SELECT `notice_type` 
							FROM (prefix_notice) 
							WHERE `".$var_name."` ='".$var_value."'
							) 
						AS 	`is_exist`";

		; $query =
			$this->db->query($sql);
		; $result = $query->row();
		;
		return $result->is_exist;
	}

	function define()
	{
		$this->table  = "prefix_notice";
		$this->column = array
		(
			"nid",
			"title",
			"content",
			"img_list" ,
			"uid" ,
			"time",
			"coordinate",
			"counter_view",
			"counter_follow",
			"counter_praise",
			"user_list_view",
			"user_list_follow",
			"user_list_praise"
        );
	}
}

/****
CREATE TABLE IF NOT EXISTS `prefix_notice` (
  `nid` int(30) NOT NULL AUTO_INCREMENT,
  `title` tinytext,
  `content` text,
  `img_list` varchar(512) DEFAULT NULL,
  `uid` int(11) DEFAULT NULL,
  `time` datetime DEFAULT NULL,
  `coordinate` varchar(64) DEFAULT NULL,
  `counter_view` int(11) DEFAULT NULL,
  `counter_follow` int(11) DEFAULT NULL,
  `counter_praise` int(11) DEFAULT NULL,
  `user_list_follow` text NOT NULL,
  `user_list_praise` text NOT NULL,
  `user_list_view` text NOT NULL,
  PRIMARY KEY (`nid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;


delete_car_notice($nid)
	{
		$this->db->where('nid', $nid);
        $result = $this->db->delete($this->table);

        return $result;
	}


	function define()
	{
		$this->table  = "prefix_notice";
		$this->column = array
		(
			"nid",
			"title",
			"content",
			"img_list" ,
			"uid" ,
			"time",
			"coordinate",
			"counter_view",
			"counter_follow",
			"counter_praise",
			"user_list_view",
			"user_list_follow",
			"user_list_praise"
        );
	}
}

/****
CREATE TABLE IF NOT EXISTS `prefix_notice` (
  `nid` int(30) NOT NULL AUTO_INCREMENT,
  `title` tinytext,
  `content` text,
  `img_list` varchar(512) DEFAULT NULL,
  `uid` int(11) DEFAULT NULL,
  `time` datetime DEFAULT NULL,
  `coordinate` varchar(64) DEFAULT NULL,
  `counter_view` int(11) DEFAULT NULL,
  `counter_follow` int(11) DEFAULT NULL,
  `counter_praise` int(11) DEFAULT NULL,
  `user_list_follow` text NOT NULL,
  `user_list_praise` text NOT NULL,
  `user_list_view` text NOT NULL,
  PRIMARY KEY (`nid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;
*/